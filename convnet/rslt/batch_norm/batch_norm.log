[0m# ... lunching using pid = 11668[0m	
[0m# ... switching to CUDA[0m	
[0m# ... loading Dataset[0m	
[0m# ... building model[0m	
[0m# Model[0m	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> (27) -> (28) -> (29) -> (30) -> (31) -> (32) -> (33) -> (34) -> (35) -> (36) -> (37) -> (38) -> (39) -> (40) -> (41) -> (42) -> (43) -> (44) -> (45) -> (46) -> (47) -> (48) -> (49) -> (50) -> (51) -> (52) -> (53) -> (54) -> (55) -> (56) -> (57) -> (58) -> (59) -> output]
  (1): nn.SpatialConvolution(in: 3, out: 64, kW: 3, kH: 3, padding: 1)
  (2): nn.SpatialBatchNormalization
  (3): nn.ReLU
  (4): nn.Dropout(0.300000)
  (5): nn.SpatialConvolution(in: 64, out: 64, kW: 3, kH: 3, padding: 1)
  (6): nn.SpatialBatchNormalization
  (7): nn.ReLU
  (8): nn.SpatialMaxPooling(kW: 2, kH: 2, dW: 2, dH: 2)
  (9): nn.SpatialConvolution(in: 64, out: 128, kW: 3, kH: 3, padding: 1)
  (10): nn.SpatialBatchNormalization
  (11): nn.ReLU
  (12): nn.Dropout(0.400000)
  (13): nn.SpatialConvolution(in: 128, out: 128, kW: 3, kH: 3, padding: 1)
  (14): nn.SpatialBatchNormalization
  (15): nn.ReLU
  (16): nn.SpatialMaxPooling(kW: 2, kH: 2, dW: 2, dH: 2)
  (17): nn.SpatialConvolution(in: 128, out: 256, kW: 3, kH: 3, padding: 1)
  (18): nn.SpatialBatchNormalization
  (19): nn.ReLU
  (20): nn.Dropout(0.400000)
  (21): nn.SpatialConvolution(in: 256, out: 256, kW: 3, kH: 3, padding: 1)
  (22): nn.SpatialBatchNormalization
  (23): nn.ReLU
  (24): nn.Dropout(0.400000)
  (25): nn.SpatialConvolution(in: 256, out: 256, kW: 3, kH: 3, padding: 1)
  (26): nn.SpatialBatchNormalization
  (27): nn.ReLU
  (28): nn.SpatialMaxPooling(kW: 2, kH: 2, dW: 2, dH: 2)
  (29): nn.SpatialConvolution(in: 256, out: 512, kW: 3, kH: 3, padding: 1)
  (30): nn.SpatialBatchNormalization
  (31): nn.ReLU
  (32): nn.Dropout(0.400000)
  (33): nn.SpatialConvolution(in: 512, out: 512, kW: 3, kH: 3, padding: 1)
  (34): nn.SpatialBatchNormalization
  (35): nn.ReLU
  (36): nn.Dropout(0.400000)
  (37): nn.SpatialConvolution(in: 512, out: 512, kW: 3, kH: 3, padding: 1)
  (38): nn.SpatialBatchNormalization
  (39): nn.ReLU
  (40): nn.SpatialMaxPooling(kW: 2, kH: 2, dW: 2, dH: 2)
  (41): nn.SpatialConvolution(in: 512, out: 512, kW: 3, kH: 3, padding: 1)
  (42): nn.SpatialBatchNormalization
  (43): nn.ReLU
  (44): nn.Dropout(0.400000)
  (45): nn.SpatialConvolution(in: 512, out: 512, kW: 3, kH: 3, padding: 1)
  (46): nn.SpatialBatchNormalization
  (47): nn.ReLU
  (48): nn.Dropout(0.400000)
  (49): nn.SpatialConvolution(in: 512, out: 512, kW: 3, kH: 3, padding: 1)
  (50): nn.SpatialBatchNormalization
  (51): nn.ReLU
  (52): nn.SpatialMaxPooling(kW: 3, kH: 3, dW: 3, dH: 3)
  (53): nn.Reshape(8192)
  (54): nn.Dropout(0.500000)
  (55): nn.Linear(8192 -> 2048)
  (56): nn.BatchNormalization
  (57): nn.ReLU
  (58): nn.Dropout(0.500000)
  (59): nn.Linear(2048 -> 101)
}
[0mNumber of parameters 31713445[0m	
[0m# Criterion[0m	
nn.ClassNLLCriterion
[0m# ... building optimizer[0m	
[0m# Optimizer[0m	
{
  name : [1;30m"[0m[0;32mSGD[0m[1;30m"[0m
  method : [0;35mfunction: 0x418fc0f8[0m
  config : 
    {
      learningRateDecay : [0;36m0[0m
      learningRate : [0;36m0.02[0m
      weightDecay : [0;36m0.001[0m
      momentum : [0;36m0.9[0m
    }
  state : 
    {
      evalCounter : [0;36m0[0m
    }
}
[0m
# ... test model[0m	
/home/cadene/torch/install/bin/luajit: ...h/install/share/lua/5.1/nn/SpatialBatchNormalization.lua:60: only mini-batch supported (4D tensor), got 3D tensor instead
stack traceback:
	[C]: in function 'assert'
	...h/install/share/lua/5.1/nn/SpatialBatchNormalization.lua:60: in function 'updateOutput'
	/home/cadene/torch/install/share/lua/5.1/nn/Sequential.lua:29: in function 'forward'
	5_test.lua:19: in function 'test'
	main.lua:198: in main chunk
	[C]: in function 'dofile'
	...dene/torch/install/lib/luarocks/rocks/trepl/scm-1/bin/th:131: in main chunk
	[C]: at 0x00405d30
